pipeline{
    agent any
    tools {
        nodejs 'NODE20'
        jdk 'JDK17'
    }
    environment {
        registryCredentials = 'ecr:eu-west-3:awscreds'
        imageName = "961341553126.dkr.ecr.eu-west-3.amazonaws.com/intimacy-repository"
        intimacyRegistry = "https://961341553126.dkr.ecr.eu-west-3.amazonaws.com"
    }
    stages{
        stage("Fetch code"){
            steps{
                git branch: 'develop', url: 'https://github.com/Salim255/intimacy-back-v2.git'
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage("Install Dependencies"){
            steps{
                sh 'npm install'       // <--- This installs dependencies
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========B executed successfully========"
                }
                failure{
                    echo "========B execution failed========"
                }
            }
        }

        stage("Build"){
            steps{
                script { sh 'npm run build'}
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "======== Build executed successfully========"
                    echo "========Archiving artifact======="
                    archiveArtifacts artifacts: 'dist/**', fingerprint: true
                }
                failure{
                    echo "========Build execution failed========"
                }
            }
        }

         stage('Archive Artifact') {
            steps {
                sh 'tar -czf dist.tar.gz dist' // or use zip if needed
                archiveArtifacts artifacts: 'dist.tar.gz', fingerprint: true
            }
        }

        stage("Unit Tests"){
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                   sh 'npm run test'
                   sh 'npm run test:cov'
                }
               
            }
            post{
    
                success{
                    echo "========Unit Tests executed successfully========"
                }
                failure{
                    echo "========B execution failed========"
                }
            }
        }

        stage("Checkstyle Analysis"){
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'npm run lint:report'
                }
              
            }
            post{
                always {
                    archiveArtifacts artifacts: 'eslint-report.json', fingerprint: true
                }
                success{
                    echo "========checkstyle executed successfully========"
                }
                failure{
                    echo "========checkstyle execution failed========"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${imageName}:backend-$BUILD_NUMBER", ".")
                }
            }
        }

        stage("Upload App Image"){
            steps{
                script{
                    docker.withRegistry(intimacyRegistry, registryCredentials) {
                      dockerImage.push("backend-${BUILD_NUMBER}")
                      dockerImage.push("latest")
                    }
                }
            }
        }

        stage("Deploy to Cluster"){
            agent { label 'minikube' }
            steps {
                script {
                    sh 'pwd'
                }
            }
        }
    }
}
