pipeline{
    agent any
    tools {
        nodejs 'NODE20'
        jdk 'JDK17'
    }
    environment {
        registryCredentials = 'ecr:eu-west-3:awscreds'
        imageName = "961341553126.dkr.ecr.eu-west-3.amazonaws.com/intimacy-repository"
        intimacyRegistry = "https://961341553126.dkr.ecr.eu-west-3.amazonaws.com"
    }
    stages{
        stage("Fetch code"){
            steps{
                git branch: 'develop', url: 'https://github.com/Salim255/intimacy-back-v2.git'
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage("Install Dependencies"){
            steps{
                sh 'npm install'       // <--- This installs dependencies
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========B executed successfully========"
                }
                failure{
                    echo "========B execution failed========"
                }
            }
        }

        stage("Build"){
            steps{
                script { sh 'npm run build'}
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "======== Build executed successfully========"
                    echo "========Archiving artifact======="
                    archiveArtifacts artifacts: 'dist/**', fingerprint: true
                }
                failure{
                    echo "========Build execution failed========"
                }
            }
        }

         stage('Archive Artifact') {
            steps {
                sh 'tar -czf dist.tar.gz dist' // or use zip if needed
                archiveArtifacts artifacts: 'dist.tar.gz', fingerprint: true
            }
        }

        stage("Unit Tests"){
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                   sh 'npm run test'
                }
               
            }
            post{
    
                success{
                    echo "========Unit Tests executed successfully========"
                }
                failure{
                    echo "========B execution failed========"
                }
            }
        }

      /*   stage("Integration test"){
            steps {
                 sh 'npm run test'
            }
        }
 */
stage("e2e test") {
  steps {
    script {
      // Remove existing container if it exists, ignore errors if not found
      sh 'docker rm -f pg-test || true'

      // Run new PostgreSQL container
      sh '''
        docker network create test-net || true
        docker run -d --name pg-test --network test-net \
          -e POSTGRES_DB=intimacyTest \
          -e POSTGRES_USER=salimhassanmohamed \
          -e POSTGRES_PASSWORD=yourStrongPassword \
          -p 5432:5432 \
          postgres:14
      '''

      // Optionally wait for Postgres to be ready (poll or sleep)
      sh '''
        for i in {1..10}; do
          docker exec pg-test pg_isready && break
          echo "Waiting for postgres to be ready..."
          sleep 3
        done
      '''

      // Run your integration tests here with env vars pointing to the container
      withEnv([
        'DB_TEST_HOST=localhost',
        'DB_TEST_PORT=5432',
        'DB_TEST_DATABASE=intimacyTest',
        'DB_TEST_USER=salimhassanmohamed',
        'DB_TEST_PASSWORD=yourStrongPassword'
      ]) {
        sh 'npm run test:e2e' // Replace with your actual test command
      }

      // Optionally stop and remove container after tests
      sh 'docker rm -f pg-test'
    }
  }
}


        stage("Test coverage"){
            steps {
                sh 'npm run test:cov'
            }
        }

        stage("Checkstyle Analysis"){
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'npm run lint:report'
                }
              
            }
            post{
                always {
                    archiveArtifacts artifacts: 'eslint-report.json', fingerprint: true
                }
                success{
                    echo "========checkstyle executed successfully========"
                }
                failure{
                    echo "========checkstyle execution failed========"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${imageName}:backend-$BUILD_NUMBER", ".")
                }
            }
        }

        stage("Upload App Image"){
            steps{
                script{
                    docker.withRegistry(intimacyRegistry, registryCredentials) {
                      dockerImage.push("backend-${BUILD_NUMBER}")
                      dockerImage.push("latest")
                    }
                }
            }
        }

        stage("Deploy to Cluster"){
            agent { label 'minikube' }
            steps {
                script {
                    sh 'pwd'
                    sh 'kubectl rollout restart deployment server-deployment -n default'
                }
            }
        }
    }
}
