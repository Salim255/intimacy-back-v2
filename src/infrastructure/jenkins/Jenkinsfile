pipeline{
    agent any

    tools {
        nodejs 'NODE20'
        jdk 'JDK17'
    }
    environment {
        registryCredentials = 'ecr:eu-west-3:awscreds'
        imageName = "961341553126.dkr.ecr.eu-west-3.amazonaws.com/intimacy-repository"
        intimacyRegistry = "https://961341553126.dkr.ecr.eu-west-3.amazonaws.com"
    }
    stages{
        stage("Fetch code"){
            steps{
                git branch: 'develop', url: 'https://github.com/Salim255/intimacy-back-v2.git'
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage("Install Dependencies"){
            steps{
                sh 'npm install'       // <--- This installs dependencies
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========B executed successfully========"
                }
                failure{
                    echo "========B execution failed========"
                }
            }
        }

        stage("Build"){
                    steps{
                                            script {
                        try {
                            sh 'npm install'
                        } catch (err) {
                            echo "Install failed: ${err}"
                            error("Stopping pipeline due to install failure")
                        }
                        }
                        
                    }
                    post{
                        always{
                            echo "========always========"
                        }
                        success{
                            echo "======== Build executed successfully========"
                            echo "========Archiving artifact======="
                            archiveArtifacts artifacts: 'dist/**', fingerprint: true
                        }
                        failure{
                            echo "========Build execution failed========"
                        }
                    }
        }

         stage('Archive Artifact') {
            steps {
                sh 'tar -czf dist.tar.gz dist' // or use zip if needed
                archiveArtifacts artifacts: 'dist.tar.gz', fingerprint: true
            }
        }

        stage("Unit Tests"){
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                   sh 'npm run test'
                   sh 'npm run test:cov'
                }
               
            }
            post{
    
                success{
                    echo "========Unit Tests executed successfully========"
                }
                failure{
                    echo "========B execution failed========"
                }
            }
        }

        stage("Checkstyle Analysis"){
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'npm run lint:report'
                }
              
            }
            post{
                always {
                    archiveArtifacts artifacts: 'eslint-report.json', fingerprint: true
                }
                success{
                    echo "========checkstyle executed successfully========"
                }
                failure{
                    echo "========checkstyle execution failed========"
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONARQUBE_SCANNER_HOME = tool 'sonar7.1' 
            }
            steps {
                withSonarQubeEnv('sonarserver') { 
                    sh '''
                        ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=intimacy-back-v2 \
                        -Dsonar.projectName="Intimacy Backend" \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src \
                        -Dsonar.exclusions=src/infrastructure/**/* \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.eslint.reportPaths=eslint-report.json \
                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                    '''
                    
                    echo "========SonarQube Analysis executed successfully========"
                }
            }
        }
        
        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
                 //jenkins-ci-webhook
            }
        }

        stage("Upload to Nexus") {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '172.31.4.90:8081',
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'intimacy-backend-repository',
                    credentialsId: 'nexuslogin',
                    artifacts: [[
                        artifactId: 'intimacyapp',
                        classifier: '',
                        file: 'dist.tar.gz',     // Matches the archived file
                        type: 'tgz'              // tgz = tar + gzip = .tar.gz
                    ]]
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${imageName}-backend:$BUILD_NUMBER", ".")
                }
            }
        }

        stage("Upload App Image"){
            steps{
                script{
                    docker.withRegistry(intimacyRegistry, registryCredentials) {
                      dockerImage.push("$BUILD_NUMBER")
                      dockerImage.push("latest")
                    }
                }
            }
        }
    }
}
